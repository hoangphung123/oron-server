import React, { useState, useEffect } from "react";
import axios from "axios";

// Mapping c√°c icon v·ªõi s·ªë
const iconMapping = [
  { id: 1, type: "like", emoji: "üëç" },
  { id: 2, type: "love", emoji: "‚ù§Ô∏è" },
  { id: 3, type: "haha", emoji: "üòÇ" },
  { id: 4, type: "wow", emoji: "üòÆ" },
  { id: 5, type: "sad", emoji: "üò¢" },
  { id: 6, type: "angry", emoji: "üò°" },
];

const Post = () => {
  const [selectedReaction, setSelectedReaction] = useState(""); // Chu·ªói r·ªóng: tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
  const [showIcons, setShowIcons] = useState(false);

  // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu ban ƒë·∫ßu
  useEffect(() => {
    const fetchReaction = async () => {
      try {
        const response = await axios.get("/api/reactions");
        const reactionId = response.data?.reactionId || ""; // L·∫•y reactionId ho·∫∑c m·∫∑c ƒë·ªãnh r·ªóng
        setSelectedReaction(reactionId);
      } catch (error) {
        console.error("L·ªói khi l·∫•y reaction ban ƒë·∫ßu:", error);
      }
    };

    fetchReaction();
  }, []);

  // H√†m g·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i
  const updateReaction = async (reactionId) => {
    try {
      if (reactionId === selectedReaction) {
        // N·∫øu nh·∫•n v√†o icon hi·ªán t·∫°i, reset v·ªÅ default (x√≥a tr·∫°ng th√°i)
        // await axios.delete("/api/reactions");
        setSelectedReaction(""); // Reset v·ªÅ default
      } else {
        // N·∫øu ch·ªçn icon kh√°c, c·∫≠p nh·∫≠t tr·∫°ng th√°i
        // await axios.post("/api/reactions", { reactionId });
        setSelectedReaction(reactionId); // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      }
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t reaction:", error);
    }
  };

  return (
    <div className="p-4 border rounded-md shadow-md w-1/2 mx-auto mt-4">
      <h2 className="text-lg font-bold mb-4">B√†i vi·∫øt c·ªßa b·∫°n</h2>
      <p className="mb-4">ƒê√¢y l√† n·ªôi dung b√†i vi·∫øt m·∫´u. H√£y th·ª≠ th·∫£ m·ªôt icon!</p>
      <div
        className="relative inline-block"
        onMouseEnter={() => setShowIcons(true)}
        onMouseLeave={() => setShowIcons(false)}
      >
        {/* N√∫t hi·ªÉn th·ªã icon hi·ªán t·∫°i ho·∫∑c m·∫∑c ƒë·ªãnh */}
        <button
          className="text-2xl p-2 rounded hover:bg-gray-200"
          onClick={() => updateReaction("")} // Reset v·ªÅ default khi b·∫•m v√†o icon m·∫∑c ƒë·ªãnh
        >
          {selectedReaction
            ? iconMapping.find((icon) => icon.id === selectedReaction)?.emoji
            : "‚≠ê"} {/* Icon m·∫∑c ƒë·ªãnh ban ƒë·∫ßu */}
        </button>

        {/* Danh s√°ch icon khi hover */}
        {showIcons && (
          <div className="absolute flex gap-2 p-2 bg-white border rounded shadow-lg top-10">
            {iconMapping.map((icon) => (
              <button
                key={icon.id}
                onClick={() => updateReaction(icon.id)}
                className={`text-2xl p-2 rounded ${
                  selectedReaction === icon.id ? "bg-blue-200" : "hover:bg-gray-200"
                }`}
                title={`Th·∫£ ${icon.type}`}
              >
                {icon.emoji}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Post;
